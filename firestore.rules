rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isUpdatingField(fieldName) {
      return (!(fieldName in resource.data) && fieldName in request.resource.data) || 
              resource.data[fieldName] != request.resource.data[fieldName];
    }

    function onlyUpdatesFields(fields) {
      return request.resource.data.size() == fields.size() &&
             request.resource.data.diff(resource.data).changedKeys().hasAll(fields)
    }

    function hasFields(fields) {
      return request.resource.data.size() == fields.size() &&
             request.resource.data.keys().hasAll(fields);
    }

    function isUser() {
      return request.auth.uid != null;
    }

    match /users/{userId} {
      function isOwner() {
        return request.auth.uid == userId;
      }

      function validateDisplayName() {
        return request.auth.token.name == request.resource.data.displayName;
      }

      function validateEmail() {
        return request.auth.token.email == request.resource.data.email;
      }

      function validatePhotoURL() {
        return request.resource.data.photoURL is string;
      }

      // TODO: https://firebase.google.com/docs/firestore/manage-data/transactions#data_validation_for_atomic_operations
      function validatePartner() {
        return isOwner() ?
                exists(/databases/$(database)/documents/users/$(request.resource.data.partner)) :
                request.auth.uid == request.resource.data.partner;
      }

      function validateStreak() {
        return !isUpdatingField('streak') || 
               (request.resource.data.streak == 0 && resource.data.streak == null);
      }

      function validateChangedUserFields() {
        return hasFields(['displayName', 'email', 'photoURL', 'partner', 'streak']) &&
               validateDisplayName() &&
               validateEmail() &&
               validatePhotoURL() &&
               validatePartner() &&
               validateStreak();
      }

      allow get: if isUser();

      allow create, delete: if isOwner(); // TODO: https://firebase.google.com/docs/firestore/manage-data/transactions#data_validation_for_atomic_operations

      // Allow update to non-owners only if the user is updating only the partner field
      allow update: if (isOwner() && validateChangedUserFields()) ||
                       (validatePartner() && onlyUpdatesFields(['partner']));

      match /todos/{todoId} {
        function isPartner() {
          let partner = get(/databases/$(database)/documents/users/$(userId)).data.partner;
          return partner == request.auth.uid;
        }

        function validateCreatedAt() {
          return request.resource.data.createdAt is timestamp;
        }

        function validateProof() {
          return (request.resource.data.proof is string || request.resource.data.proof == null);
        }

        function validateTitle() {
          return request.resource.data.title is string;
        }

        function validateStatus() {
          return (isOwner()   && request.resource.data.status in ['unfinished', 'finished']) ||
                 (isPartner() && request.resource.data.status == 'verified')        
        }

        function validateTodoFields() {
          return hasFields(['createdAt', 'proof', 'title', 'status']) &&
                 validateCreatedAt() &&
                 validateProof() &&
                 validateTitle() &&
                 validateStatus()
        }

        allow read: if isOwner() || isPartner();

        allow create: if isOwner() && validateTodoFields();
        allow delete: if isOwner();
        allow update: if (isOwner()   && validateTodoFields()) ||
                         (isPartner() && validateStatus() && onlyUpdatesFields(['status']));
      }
    }
  }
}