rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isUpdatingField(fieldName) {
      return (!(fieldName in resource.data) && fieldName in request.resource.data) || 
              resource.data[fieldName] != request.resource.data[fieldName];
    }

    function onlyUpdatesFields(fields) {
      let changedKeys = request.resource.data.diff(resource.data).changedKeys();
      return changedKeys.size() == fields.size() &&
             changedKeys.hasAll(fields);
    }

    function hasFields(fields) {
      return request.resource.data.size() == fields.size() &&
             request.resource.data.keys().hasAll(fields);
    }

    function isUser() {
      return request.auth.uid != null;
    }

    match /users/{userId} {
      function isOwner() {
        return request.auth.uid == userId;
      }

      function isPreviousPartner() {
        return request.auth.uid == resource.data.partner;
      }

      function isFuturePartner() {
        return request.auth.uid == request.resource.data.partner;
      }

      function validateCreateDisplayName() {
        return request.resource.data.displayName is string;
      }

      function validateUpdateDisplayName() {
        return validateCreateDisplayName() && request.resource.data.displayName.size() > 0;
      }

      function validateCreateEmail() {
        return request.resource.data.email is string && request.resource.data.email.matches('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$');
      }

      function validateUpdateEmail() {
        return validateCreateEmail();
      }

      function validateCreatePhotoURL() {
        return request.resource.data.photoURL is string;
      }

      function validateUpdatePhotoURL() {
        return validateCreatePhotoURL();
      }

      function validateCreatePartner() {
        return request.resource.data.partner == null;
      }

      // TODO: https://firebase.google.com/docs/firestore/manage-data/transactions#data_validation_for_atomic_operations
      function validateUpdatePartner() {
        let prevPartnerUid = resource.data.partner;
        let prevPartnerRef = /databases/$(database)/documents/users/$(prevPartnerUid);
        let prevPartnersNewPartnerUid = getAfter(prevPartnerRef).data.partner;
        let prevPartnersNewPartnerRef = /databases/$(database)/documents/users/$(prevPartnersNewPartnerUid);
        let partnerUid = request.resource.data.partner;
        let partnerRef = /databases/$(database)/documents/users/$(partnerUid);
        return !isUpdatingField("partner") ||
               (isOwner() && prevPartnerUid != null && partnerUid == null && getAfter(prevPartnerRef).data.partner == null) || // Owner leaves partnership
               (isOwner() && prevPartnerUid == null && partnerUid != null && getAfter(partnerRef).data.partner == userId) || // Owner creates partnership
               (isOwner() && prevPartnerUid != null && partnerUid != null && getAfter(prevPartnerRef).data.partner == null && getAfter(partnerRef).data.partner == userId) || // Owner changes partner
               (isPreviousPartner() && partnerUid == null && getAfter(prevPartnerRef).data.partner == null) || // Previous partner leaves partnership
               (isFuturePartner() && (prevPartnerUid == null || getAfter(prevPartnerRef).data.partner == null) && getAfter(partnerRef).data.partner == userId) || // New partner creates partnership
               (isPreviousPartner() && partnerUid == null && getAfter(prevPartnersNewPartnerRef).data.partner == prevPartnerUid) // Previous partner changes partner
      }

      function validateCreateStreak() {
        return request.resource.data.streak == 0;
      }

      function validateUpdateStreak() {
        return !isUpdatingField("streak");
      }

      function validateCreateUserFields() {
        return hasFields(['displayName', 'email', 'photoURL', 'partner', 'streak']) &&
                validateCreateDisplayName() &&
                validateCreateEmail() &&
                validateCreatePhotoURL() &&
                validateCreatePartner() &&
                validateCreateStreak();
      }

      function validateUpdateUserFields() {
        return hasFields(['displayName', 'email', 'photoURL', 'partner', 'streak']) &&
               validateUpdateDisplayName() &&
               validateUpdateEmail() &&
               validateUpdatePhotoURL() &&
               validateUpdatePartner() &&
               validateUpdateStreak();
      }

      function validateDeleteUserFields() {
        return !existsAfter(/databases/$(database)/documents/users/$(userId)/todos);
      }

      allow get: if isUser();

      allow create: if isOwner() && validateCreateUserFields();
      allow delete: if isOwner() && validateDeleteUserFields();

      // Allow update to non-owners only if the user is updating only the partner field
      allow update: if (isOwner() && validateUpdateUserFields()) ||
                       (validateUpdatePartner() && onlyUpdatesFields(['partner']));

      match /todos/{todoId} {
        function isPartner() {
          let partner = get(/databases/$(database)/documents/users/$(userId)).data.partner;
          return partner == request.auth.uid;
        }

        function validateCreatedAt() {
          return !isUpdatingField("createdAt") || request.resource.data.createdAt == request.time;
        }

        function validateProof() {
          return (request.resource.data.proof is string) || (request.resource.data.proof == null);
        }

        function validateTitle() {
          return request.resource.data.title is string;
        }

        function validateStatus() { // TODO: ensure proof is a URL if status is set to finished
          return (isOwner()   && request.resource.data.status in ['unfinished', 'finished']) ||
                 (isPartner() && request.resource.data.status == 'verified')
        }

        function validateTodoFields() {
          return hasFields(['createdAt', 'proof', 'title', 'status']) &&
                 validateCreatedAt() &&
                 validateProof() &&
                 validateTitle() &&
                 validateStatus()
        }

        allow read: if isOwner() || isPartner();

        allow create: if isOwner() && validateTodoFields();
        allow delete: if isOwner();
        allow update: if (isOwner()   && validateTodoFields()) ||
                         (isPartner() && validateStatus() && onlyUpdatesFields(['status']));
      }
    }
  }
}