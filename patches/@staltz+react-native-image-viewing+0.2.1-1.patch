diff --git a/node_modules/@staltz/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js b/node_modules/@staltz/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
index d7d15ec..dbba44e 100644
--- a/node_modules/@staltz/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
+++ b/node_modules/@staltz/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
@@ -5,8 +5,8 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-import React, { useState, useCallback } from "react";
-import { Animated, Dimensions, } from "react-native";
+import React, { useState, useCallback, useRef } from "react";
+import { Animated, Dimensions, Platform, } from "react-native";
 import useImageDimensions from "../../hooks/useImageDimensions";
 import usePanResponder from "../../hooks/usePanResponder";
 import { getImageStyles, getImageTransform } from "../../utils";
@@ -17,7 +17,7 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
     const SCREEN = Dimensions.get('window');
     const SCREEN_WIDTH = SCREEN.width;
     const SCREEN_HEIGHT = SCREEN.height;
-    const imageContainer = React.createRef();
+    const imageContainer = useRef();
     const imageDimensions = useImageDimensions(imageSrc);
     const [translate, scale] = getImageTransform(imageDimensions, SCREEN);
     const scrollValueY = new Animated.Value(0);
@@ -50,7 +50,9 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
         outputRange: [0.7, 1, 0.7],
     });
     const imageStylesWithOpacity = { ...imagesStyles, opacity: imageOpacity };
-    const onScrollEndDrag = ({ nativeEvent, }) => {
+    let lastScrollEvent;
+    const onScrollEndDrag = () => {
+        const nativeEvent = lastScrollEvent;
         var _a, _b, _c, _d, _e, _f;
         const velocityY = (_c = (_b = (_a = nativeEvent) === null || _a === void 0 ? void 0 : _a.velocity) === null || _b === void 0 ? void 0 : _b.y, (_c !== null && _c !== void 0 ? _c : 0));
         const offsetY = (_f = (_e = (_d = nativeEvent) === null || _d === void 0 ? void 0 : _d.contentOffset) === null || _e === void 0 ? void 0 : _e.y, (_f !== null && _f !== void 0 ? _f : 0));
@@ -60,12 +62,37 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
             onRequestClose();
         }
     };
+    let timeoutId;
+    const scrollToTop = () => {
+        imageContainer.current.scrollTo({ x: 0, y: 0, animated: true });
+        timeoutId = setTimeout(() => {
+            imageContainer.current?.scrollTo({ x: 0, y: 0, animated: true });
+        }, 800);
+    };
     const onScroll = ({ nativeEvent, }) => {
+        lastScrollEvent = nativeEvent;
         var _a, _b, _c;
         const offsetY = (_c = (_b = (_a = nativeEvent) === null || _a === void 0 ? void 0 : _a.contentOffset) === null || _b === void 0 ? void 0 : _b.y, (_c !== null && _c !== void 0 ? _c : 0));
         scrollValueY.setValue(offsetY);
     };
-    return (<Animated.ScrollView ref={imageContainer} style={{ width: SCREEN_WIDTH, height: SCREEN_HEIGHT }} pagingEnabled nestedScrollEnabled showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false} contentContainerStyle={{ height: SCREEN_HEIGHT * 2 }} scrollEnabled={swipeToCloseEnabled} {...(swipeToCloseEnabled && {
+    if (Platform.OS === "web") {
+        panHandlers.onResponderRelease = (() => {
+            const { onResponderRelease } = panHandlers;
+            return (e, gestureState) => {
+                onResponderRelease === null || onResponderRelease === void 0 ? void 0 : onResponderRelease(e, gestureState);
+                scrollToTop();
+                onScrollEndDrag();
+            }
+        })();
+        panHandlers.onResponderStart = (() => {
+            const { onResponderStart } = panHandlers;
+            return (e, gestureState) => {
+                onResponderStart === null || onResponderStart === void 0 ? void 0 : onResponderStart(e, gestureState);
+                clearTimeout(timeoutId);
+            }
+        })();
+    }
+    return (<Animated.ScrollView ref={imageContainer} style={{ width: SCREEN_WIDTH, height: SCREEN_HEIGHT }} pagingEnabled nestedScrollEnabled showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false} contentContainerStyle={{ height: (imageDimensions?.height + 1) ?? (SCREEN_HEIGHT * 2) }} scrollEnabled={swipeToCloseEnabled} {...(swipeToCloseEnabled && {
         onScroll,
         onScrollEndDrag,
     })}>
